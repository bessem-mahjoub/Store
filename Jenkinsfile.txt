 pipeline {
    agent any
        environment {
        SONARQUBE_SERVER = 'Store_Mahjoub' 
        SONAR_PROJECT_KEY = 'sqp_c0afd263828314507ad9c5d5938b5bddec42f084'
    }
    stages {
        stage('Clonage du d√©p√¥t') {
            steps {
                echo 'üì• Clonage du d√©p√¥t Git'
                git branch: 'main', url: 'https://github.com/Bessem-Mahjoub/store.git'
            }
        }
        stage('Tests unitaires') {
    steps {
        echo 'üß™ Ex√©cution des tests JUnit'
        sh 'mvn test'
            }
        }
                stage('Run Tests') {
            steps {
                sh 'mvn clean verify'
            }
        }
        stage('JaCoCo Coverage Report') {
            steps {
                echo 'üìä G√©n√©ration du rapport JaCoCo'
                withSonarQubeEnv('Store_Mahjoub') {
                    sh '''
                        mvn sonar:sonar \
                        -Dsonar.projectKey=store-mahjoub \
                        -Dsonar.projectName=store-mahjoub \
                        -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml
                    '''
                }
            }
        }
        stage('Test Maven') {
            steps {
                sh 'mvn -version'
            }
        }
        stage('Test Git') {
            steps {
                sh 'git --version'
            }
        }
        stage('Build Maven') {
            steps {
                echo '‚öôÔ∏è Compilation du projet Maven'
                sh 'mvn clean package -DskipTests'
            }
        }
stage('Clean Nexus Snapshots') {
    steps {
        withCredentials([usernamePassword(credentialsId: 'nexus-credentials', usernameVariable: 'NEXUS_USER', passwordVariable: 'NEXUS_PASS')]) {
            sh '''
                apt-get update && apt-get install -y jq  # si pas d√©j√† install√©
                NEXUS_URL="http://192.168.33.10:8081"
                REPO="maven-snapshots"
                components=$(curl -s -u $NEXUS_USER:$NEXUS_PASS "$NEXUS_URL/service/rest/v1/components?repository=$REPO")
                echo "$components" | jq -r '.items[] | select(.version | test("SNAPSHOT")) | .id' | while read id; do
                    echo "Suppression du composant id=$id"
                    curl -s -u $NEXUS_USER:$NEXUS_PASS -X DELETE "$NEXUS_URL/service/rest/v1/components/$id"
                done
            '''
        }
    }
}

        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('Store_Mahjoub') {
                    sh '''
                    mvn sonar:sonar \
                        -Dsonar.projectKey=store-mahjoub \
                        -Dsonar.projectName=store-mahjoub \
                        -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml
                    '''
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                echo 'üê≥ Construction de l‚Äôimage Docker'
                sh 'docker build -t mon-projet-java:latest .'
            }
        }

        stage('Run Docker Container') {
            steps {
                echo 'üöÄ Lancement du conteneur'
                sh 'docker run -d -p 9090:8080 mon-projet-java:latest'
            }
        }
    }

    post {
           always {
            echo 'üì¶ Archivage des rapports JaCoCo'
            script {
                def reportExists = fileExists('target/site/jacoco/index.html')
                if (reportExists) {
                    archiveArtifacts artifacts: 'target/site/jacoco/**'
                    publishHTML(target: [
                        reportDir: 'target/site/jacoco',
                        reportFiles: 'index.html',
                        reportName: 'JaCoCo Coverage Report',
                        keepAll: true
                    ])
                } else {
                    echo "‚ö†Ô∏è Rapport JaCoCo non trouv√©, rien √† archiver."
                }
            }
        }
        success {
            echo '‚úÖ Pipeline ex√©cut√© avec succ√®s !'
        }
        failure {
            echo '‚ùå √âchec du pipeline.'
        }
    }

}


